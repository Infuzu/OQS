{
    "TestLanguageEngineAdvanced": {
        "test_advanced_function_calls_and_kvs_manipulations": [
            {
                "input": {
                    "expression": "REMOVE_ITEM(UNIQUE(numbers), MIN(***numbers), 1)",
                    "variables": {
                        "numbers": [
                            1,
                            2,
                            1,
                            3
                        ]
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            2,
                            3
                        ],
                        "type": "List"
                    }
                }
            },
            {
                "input": {
                    "expression": "UPDATE(kvs, \"total\", SUM(VALUES(kvs)))",
                    "variables": {
                        "kvs": {
                            "a": 1,
                            "b": 2,
                            "total": 3
                        }
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": {
                            "a": 1,
                            "b": 2,
                            "total": 3
                        },
                        "type": "KVS"
                    }
                }
            }
        ],
        "test_advanced_mathematical_operations": [
            {
                "input": {
                    "expression": "MODULO(ADD(15, 5), DIVIDE(20, 2))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 0.0,
                        "type": "Decimal"
                    }
                }
            },
            {
                "input": {
                    "expression": "EXPONENTIATE(SUBTRACT(10, 2), 3)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 512,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_advanced_numerical_operations": [
            {
                "input": {
                    "expression": "MODULO(15, 4) + DIVIDE(20, 5)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 7.0,
                        "type": "Decimal"
                    }
                }
            },
            {
                "input": {
                    "expression": "EXPONENTIATE(ADD(2, 3), SUBTRACT(5, 2))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 125,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_advanced_scenarios": [
            {
                "input": {
                    "expression": "UNIQUE([***numbers, ***REVERSE(numbers)])",
                    "variables": {
                        "numbers": [
                            1,
                            2,
                            3
                        ]
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            1,
                            2,
                            3
                        ],
                        "type": "List"
                    }
                }
            },
            {
                "input": {
                    "expression": "REMOVE_ITEM([1, 2, 3, 2, 3, 3], 3, 2)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            1,
                            2,
                            2,
                            3
                        ],
                        "type": "List"
                    }
                }
            },
            {
                "input": {
                    "expression": "UPDATE(kvs, \"newKey\", IF(ACCESS(kvs, \"key\") == 5, 10, 0))",
                    "variables": {
                        "kvs": {
                            "key": 5,
                            "newKey": 10
                        }
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": {
                            "key": 5,
                            "newKey": 10
                        },
                        "type": "KVS"
                    }
                }
            }
        ],
        "test_basic": [
            {
                "input": {
                    "expression": "2 * 5 + 3",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 13,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "\"Hello \" + name",
                    "variables": {
                        "name": "World"
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "Hello World",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "ADD(1, 2, 3)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 6,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "SUBTRACT(10, LENGTH(name))",
                    "variables": {
                        "name": "OQS"
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 7,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "MULTIPLY(3, ***numbers)",
                    "variables": {
                        "numbers": [
                            2,
                            2
                        ]
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 12,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "DECIMAL(STRING(number))",
                    "variables": {
                        "number": 123
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 123.0,
                        "type": "Decimal"
                    }
                }
            },
            {
                "input": {
                    "expression": "IF(LEN(text) > 5, \"Long\", \"Short\")",
                    "variables": {
                        "text": "Hello"
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "Short",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "{***kvs1, ***kvs2}",
                    "variables": {
                        "kvs1": {
                            "a": 1
                        },
                        "kvs2": {
                            "b": 2
                        }
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": {
                            "a": 1,
                            "b": 2
                        },
                        "type": "KVS"
                    }
                }
            },
            {
                "input": {
                    "expression": "SUM([1, 2, 3]) + SUM([4, 5, 6])",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 21,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "STRING(ADD(1, 2, 3)) + \" is the sum\"",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "6 is the sum",
                        "type": "String"
                    }
                }
            }
        ],
        "test_complex_evaluation_involving_multiple_data_types": [
            {
                "input": {
                    "expression": "STRING(ADD(***[1, 2, 3], LEN(\"[1, 2, 3]\")))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "15",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "SUM([1, 2, 3]) == STRING(6)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": false,
                        "type": "Boolean"
                    }
                }
            }
        ],
        "test_complex_function_calls_and_list_manipulations": [
            {
                "input": {
                    "expression": "REMOVE_ITEM([1, 2, 3, 4, 5], ADD(2, 1))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            1,
                            2,
                            4,
                            5
                        ],
                        "type": "List"
                    }
                }
            },
            {
                "input": {
                    "expression": "APPEND(numbers, MULTIPLY(LENGTH(numbers), 2))",
                    "variables": {
                        "numbers": [
                            1,
                            2,
                            3,
                            6
                        ]
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            1,
                            2,
                            3,
                            6
                        ],
                        "type": "List"
                    }
                }
            }
        ],
        "test_complex_list_operations": [
            {
                "input": {
                    "expression": "REVERSE(APPEND(numbers, SUM(numbers)))",
                    "variables": {
                        "numbers": [
                            1,
                            2,
                            3,
                            6
                        ]
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            6,
                            3,
                            2,
                            1
                        ],
                        "type": "List"
                    }
                }
            }
        ],
        "test_complex_nested_expressions": [
            {
                "input": {
                    "expression": "IF(LEN(name) > 5, SUBTRACT(LEN(name), 3), ADD(LEN(name), 2))",
                    "variables": {
                        "name": "Scripting"
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 6,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "STRING(ADD(***[INTEGER(\"1\"), DECIMAL(\"2.5\"), 3]))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "6.5",
                        "type": "String"
                    }
                }
            }
        ],
        "test_complex_string_manipulation": [
            {
                "input": {
                    "expression": "STRING(LEN(\"Hello\")) + \" characters\"",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "5 characters",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "\"Start-\" + MULTIPLY(\"A\", 3) + \"-End\"",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "Start-AAA-End",
                        "type": "String"
                    }
                }
            }
        ],
        "test_conditional_expressions_with_functions": [
            {
                "input": {
                    "expression": "IF(LEN(name) < 5, LEN(name), SUBTRACT(LEN(name), 2))",
                    "variables": {
                        "name": "Script"
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 4,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "IF(true, SUM([1,2,3]), MULTIPLY(2,3))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 6,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_error_handling": [
            {
                "input": {
                    "expression": "DIVIDE(10, 0)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "error": {
                        "type": "Division By Zero Error",
                        "message": "Division by zero results in undefined."
                    }
                }
            }
        ],
        "test_error_handling_scenarios": [
            {
                "input": {
                    "expression": "ADD(\"5\", 10)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "error": {
                        "type": "Type Error",
                        "message": "Cannot add 'String' and 'Integer'"
                    }
                }
            },
            {
                "input": {
                    "expression": "SUBTRACT([1, 2, 3], 1)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "error": {
                        "type": "Type Error",
                        "message": "Cannot subtract 'List' by 'Integer'"
                    }
                }
            }
        ],
        "test_error_scenarios_and_edge_cases": [
            {
                "input": {
                    "expression": "DIVIDE(\"10\", 2)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "error": {
                        "type": "Type Error",
                        "message": "Cannot divide type 'String' by type 'Integer'."
                    }
                }
            }
        ],
        "test_function_calls_with_complex_arguments": [
            {
                "input": {
                    "expression": "STRING(ADD(INTEGER(\"3\"), DECIMAL(\"2.5\"), MULTIPLY(2, 2)))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "9.5",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "BOOLEAN(LEN(\"test\") == 4)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": true,
                        "type": "Boolean"
                    }
                }
            }
        ],
        "test_function_usage_with_nested_calls": [
            {
                "input": {
                    "expression": "MULTIPLY(DECIMAL(\"3.5\"), INTEGER(2.5))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 7.0,
                        "type": "Decimal"
                    }
                }
            },
            {
                "input": {
                    "expression": "ADD(STRING(LEN(\"abc\")), STRING(LEN(\"def\")))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "33",
                        "type": "String"
                    }
                }
            }
        ],
        "test_kvs_and_list_integration": [
            {
                "input": {
                    "expression": "KEYS({ \"name\": \"OQS\", \"version\": \"0.1\" }) + VALUES({ \"name\": \"OQS\", \"version\": \"0.1\" })",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            "name",
                            "version",
                            "OQS",
                            "0.1"
                        ],
                        "type": "List"
                    }
                }
            },
            {
                "input": {
                    "expression": "UPDATE(kvs, \"new\", ADD(ACCESS(kvs, \"existing\"), 10))",
                    "variables": {
                        "kvs": {
                            "existing": 5,
                            "new": 15
                        }
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": {
                            "existing": 5,
                            "new": 15
                        },
                        "type": "KVS"
                    }
                }
            }
        ],
        "test_list_and_kvs_combinations": [
            {
                "input": {
                    "expression": "APPEND(UNIQUE([1, 2, 2, 3]), MAX(***[4, 5, 6]))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            1,
                            2,
                            3,
                            6
                        ],
                        "type": "List"
                    }
                }
            },
            {
                "input": {
                    "expression": "ACCESS({***{\"key\": \"value\"}, ***{\"another\": SUM([1, 2, 3])}}, \"another\")",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 6,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_list_and_kvs_operations": [
            {
                "input": {
                    "expression": "[1, 2, 3] + REVERSE([4, 5, 6])",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            1,
                            2,
                            3,
                            6,
                            5,
                            4
                        ],
                        "type": "List"
                    }
                }
            },
            {
                "input": {
                    "expression": "KEYS({ \"a\": 1, \"b\": 2 }) + VALUES({ \"a\": 1, \"b\": 2 })",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            "a",
                            "b",
                            1,
                            2
                        ],
                        "type": "List"
                    }
                }
            },
            {
                "input": {
                    "expression": "SUM([1, 2, 3, 4])",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 10,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "MAX(***numbers)",
                    "variables": {
                        "numbers": [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 5,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_nested_and_conditional_expressions": [
            {
                "input": {
                    "expression": "IF(LEN(name) > 5, LEN(name), \"short\")",
                    "variables": {
                        "name": "OpenQuickScript"
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 15,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "STRING(ADD(1, IF(true, 2, 3)))",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "3",
                        "type": "String"
                    }
                }
            }
        ],
        "test_numerical_and_string_operations": [
            {
                "input": {
                    "expression": "3 ** 2 + LEN(\"test\")",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 13,
                        "type": "Integer"
                    }
                }
            },
            {
                "input": {
                    "expression": "STRING(5.0 * 2) - \".0\"",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "10",
                        "type": "String"
                    }
                }
            }
        ],
        "test_string_embedded_and_complex_unpacking": [
            {
                "input": {
                    "expression": "<{MULTIPLY(2, LEN(text))}> is twice the length",
                    "variables": {
                        "text": "Test"
                    },
                    "string_embedded": true
                },
                "output": {
                    "results": {
                        "value": "8 is twice the length",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "SUM([***numbers, ***REVERSE(numbers)])",
                    "variables": {
                        "numbers": [
                            1,
                            2,
                            3
                        ]
                    },
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 12,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_string_embedded_and_unpacking_expressions": [
            {
                "input": {
                    "expression": "<{ADD(1, LEN(text))}> is the length",
                    "variables": {
                        "text": "Hello"
                    },
                    "string_embedded": true
                },
                "output": {
                    "results": {
                        "value": "6 is the length",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "{ \"sum\": \"<{SUM([***numbers])}>\", \"max\": \"<{MAX(***numbers)}>\" }",
                    "variables": {
                        "numbers": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    "string_embedded": true
                },
                "output": {
                    "results": {
                        "value": "{ \"sum\": \"10\", \"max\": \"4\" }",
                        "type": "String"
                    }
                }
            }
        ],
        "test_string_embedded_expressions": [
            {
                "input": {
                    "expression": "<{ADD(1, 2)}> + <{MULTIPLY(3, 4)}>",
                    "variables": null,
                    "string_embedded": true
                },
                "output": {
                    "results": {
                        "value": "3 + 12",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "Result is <{IF(LEN(text) == 5, \"five\", \"not five\")}>.",
                    "variables": {
                        "text": "Hello"
                    },
                    "string_embedded": true
                },
                "output": {
                    "results": {
                        "value": "Result is five.",
                        "type": "String"
                    }
                }
            }
        ],
        "test_string_manipulation_and_comparisons": [
            {
                "input": {
                    "expression": "LEN(\"Concatenate\") == 11",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": true,
                        "type": "Boolean"
                    }
                }
            },
            {
                "input": {
                    "expression": "STRING(LEN(\"Concatenate\") == 11)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "true",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "IF(\"text\" - \"t\" == \"ex\", \"Correct\", \"Incorrect\")",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "Correct",
                        "type": "String"
                    }
                }
            }
        ]
    },
    "TestLanguageEngine": {
        "test_add_function": [
            {
                "input": {
                    "expression": "ADD(1, 2)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 3,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_addition": [
            {
                "input": {
                    "expression": "1 + 2",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 3,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_boolean_comparison": [
            {
                "input": {
                    "expression": "true == false",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": false,
                        "type": "Boolean"
                    }
                }
            },
            {
                "input": {
                    "expression": "true != false",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": true,
                        "type": "Boolean"
                    }
                }
            }
        ],
        "test_boolean_function": [
            {
                "input": {
                    "expression": "BOOLEAN(1)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": true,
                        "type": "Boolean"
                    }
                }
            }
        ],
        "test_complex_add_expression": [
            {
                "input": {
                    "expression": "ADD(***[1, 2, 3, 4])",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 10,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_complex_expression": [
            {
                "input": {
                    "expression": "IF(LEN(\"test\") == 4, \"valid\", \"invalid\")",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "valid",
                        "type": "String"
                    }
                }
            },
            {
                "input": {
                    "expression": "ADd(length([5, 10, ***[4, 3, \"HEllo:,\"]]), 20)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 25,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_complex_if_expression": [
            {
                "input": {
                    "expression": "IF(LEN(\"test\") == 4, \"valid\", \"invalid\")",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "valid",
                        "type": "String"
                    }
                }
            }
        ],
        "test_decimal_function": [
            {
                "input": {
                    "expression": "DECIMAL(\"42\")",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 42.0,
                        "type": "Decimal"
                    }
                }
            }
        ],
        "test_divide": [
            {
                "input": {
                    "expression": "10 / 2",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 5.0,
                        "type": "Decimal"
                    }
                }
            }
        ],
        "test_exponentiation": [
            {
                "input": {
                    "expression": "2 ** 3",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 8,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_integer_function": [
            {
                "input": {
                    "expression": "INTEGER(3.5)",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 3,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_keys_function": [
            {
                "input": {
                    "expression": "KEYS({ \"name\": \"OQS\", \"type\": \"script\" })",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            "name",
                            "type"
                        ],
                        "type": "List"
                    }
                }
            }
        ],
        "test_kvs_add_function": [
            {
                "input": {
                    "expression": "ADD({ \"a\": 1 }, { \"b\": 2 })",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": {
                            "a": 1,
                            "b": 2
                        },
                        "type": "KVS"
                    }
                }
            }
        ],
        "test_kvs_concatenation": [
            {
                "input": {
                    "expression": "{ \"a\": 1, \"b\": 2 } + { \"c\": 3 }",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": {
                            "a": 1,
                            "b": 2,
                            "c": 3
                        },
                        "type": "KVS"
                    }
                }
            }
        ],
        "test_kvs_expansion": [
            {
                "input": {
                    "expression": "{***{\"key1\": \"value1\"}, ***{\"key2\": \"value2\"}}",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": {
                            "key1": "value1",
                            "key2": "value2"
                        },
                        "type": "KVS"
                    }
                }
            }
        ],
        "test_list_add_function": [
            {
                "input": {
                    "expression": "ADD([1, 2], [3, 4])",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "List"
                    }
                }
            }
        ],
        "test_list_concatenation": [
            {
                "input": {
                    "expression": "[1, 2] + [3, 4]",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "type": "List"
                    }
                }
            }
        ],
        "test_list_subtraction": [
            {
                "input": {
                    "expression": "[1, 2, 3, 4] - [3]",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            1,
                            2,
                            4
                        ],
                        "type": "List"
                    }
                }
            }
        ],
        "test_modulo": [
            {
                "input": {
                    "expression": "9 % 2",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 1,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_multiply": [
            {
                "input": {
                    "expression": "2 * 5",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 10,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_string_concatenation": [
            {
                "input": {
                    "expression": "\"Hello \" + \"World\"",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "Hello World",
                        "type": "String"
                    }
                }
            }
        ],
        "test_string_embedded_expression": [
            {
                "input": {
                    "expression": "<{3 + 5}> is the answer",
                    "variables": null,
                    "string_embedded": true
                },
                "output": {
                    "results": {
                        "value": "8 is the answer",
                        "type": "String"
                    }
                }
            }
        ],
        "test_string_function": [
            {
                "input": {
                    "expression": "STRING([1, 2, 3])",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "[1, 2, 3]",
                        "type": "String"
                    }
                }
            }
        ],
        "test_string_repetition": [
            {
                "input": {
                    "expression": "\"repeat\" * 2",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "repeatrepeat",
                        "type": "String"
                    }
                }
            }
        ],
        "test_string_subtraction": [
            {
                "input": {
                    "expression": "\"remove\" - \"move\"",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": "re",
                        "type": "String"
                    }
                }
            }
        ],
        "test_subtraction": [
            {
                "input": {
                    "expression": "5 - 2",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 3,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_unpacked_integer": [
            {
                "input": {
                    "expression": "INTEGER(***[\"5\"])",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": 5,
                        "type": "Integer"
                    }
                }
            }
        ],
        "test_values_function": [
            {
                "input": {
                    "expression": "VALUES({ \"name\": \"OQS\", \"type\": \"script\" })",
                    "variables": null,
                    "string_embedded": false
                },
                "output": {
                    "results": {
                        "value": [
                            "OQS",
                            "script"
                        ],
                        "type": "List"
                    }
                }
            }
        ]
    }
}